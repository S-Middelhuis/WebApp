library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
library(survival)
library(readxl)
library(lubridate)
source("functions.r")
# Load data
data <- loadData(networkPath)
# Make overview
deps <- c("2C" , "2D")
tmp <- data$iclist
dataPlan <- data$dataPlanning
data <- tmp
'%!in%' <- function(x,y)!('%in%'(x,y))
#wk <- as.Date(ifelse(weekdays(Sys.Date()) == "vrijdag", Sys.Date(), floor_date(Sys.Date(), "week")+1))
data <- data %>%
mutate( GeplandeOpnamedatum = as.Date(GeplandeOpnamedatum, format="%Y-%m-%d %H:%M:%OS") )
data$icdate <- data$GeplandeOpnamedatum
wk <- floor_date(Sys.Date(), "week")+1
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
datIC   <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <=  wk + 13)
#datIC$icdate <- ifelse(grepl("Carotis", datIC$okverrichtingomschrijving ), datIC$icdate + 1, datIC$icdate)
datIC$Postoperatieve_bestemming <- ifelse(datIC$Postoperatieve_bestemming == "MC", "IC", datIC$Postoperatieve_bestemming)
datIC   <- data %>%
filter( opnamedatum >= wk & opnamedatum <=  wk + 13)
datIC   <- data %>%
filter( GeplandeOpnamedatum >= wk & opnamedatum <=  wk + 13)
datIC   <- data %>%
filter( GeplandeOpnamedatum >= wk & opnamedatum <=  wk + 13)
datIC   <- data %>%
filter( GeplandeOpnamedatum >= wk & GeplandeOpnamedatum <=  wk + 13)
#datIC$icdate <- ifelse(grepl("Carotis", datIC$okverrichtingomschrijving ), datIC$icdate + 1, datIC$icdate)
datIC$Postoperatieve_bestemming <- ifelse(datIC$Postoperatieve_bestemming == "MC", "IC", datIC$Postoperatieve_bestemming)
datIC$icdate <- as.Date(datIC$icdate)
spec <- table(data.frame(datSPEC$opnamedatum, datSPEC$opnemendspecialisme))
ic   <- table(data.frame(datIC$icdate, datIC$Postoperatieve_bestemming))
write.csv(spec, 'Data/overzichtSPEC.csv')
write.csv(ic, 'Data/overzichtIC.csv')
daterange <- as.Date(seq(Sys.Date(), wk+13, by = 1))
init      <- data.frame("Datum" = daterange, "IC" = as.integer(numeric(length(daterange))))
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
ic$Datum <- as.Date(ic$Datum)
setDT(init)
setDT(ic)
init[ic, on = c("Datum"), IC := i.IC]
totalIC <- init %>%
filter((weekdays(Datum) %!in% c('zaterdag','zondag')))
write.csv(totalIC, 'Data/overzichtIC.csv')
if ( TRUE %!in% grepl("IC", datIC$Postoperatieve_bestemming) ){
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
noIC <- ic %>%
mutate( IC = numeric(length(ic$Datum)) )
write.csv(noIC, 'Data/overzichtIC.csv', row.names=FALSE)
}
runApp()
spec <- table(data.frame(datSPEC$opnamedatum, datSPEC$opnemendspecialisme))
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
runApp()
runApp()
ptm <- proc.time()
# Folder where data is stored
# networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
networkPath <- "A:\\MMC\\Building_Blocks\\Planners\\PlanApp\\WebApp - Auto refresh\\Data"
# Libraries
library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
networkPath <- "A:\\MMC\\Building_Blocks\\Planners\\PlanApp\\WebApp - Auto refresh\\Data"
# Libraries
library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
library(survival)
library(readxl)
library(lubridate)
source("functions.r")
# Load data
data <- loadData(networkPath)
tmp <- data$iclist
dataPlan <- data$dataPlanning
data <- tmp
# Create custom function
'%!in%' <- function(x,y)!('%in%'(x,y))
data <- data %>%
mutate( GeplandeOpnamedatum = as.Date(GeplandeOpnamedatum, format="%Y-%m-%d %H:%M:%OS") )
data$icdate <- data$GeplandeOpnamedatum
wk <- floor_date(Sys.Date(), "week")+1
datIC   <- data %>%
filter( GeplandeOpnamedatum >= wk & GeplandeOpnamedatum <=  wk + 13)
typeof(datIC$VER_CODE)
datIC$icdate <- ifelse(datIC$VER_CODE == "33450", as.Date(datIC$icdate) + 1, as.Date(datIC$icdate))
datIC$Postoperatieve_bestemming <- ifelse(datIC$Postoperatieve_bestemming == "MC", "IC", datIC$Postoperatieve_bestemming)
spec <- table(data.frame(datSPEC$opnamedatum, datSPEC$opnemendspecialisme))
ic   <- table(data.frame(datIC$icdate, datIC$Postoperatieve_bestemming))
write.csv(spec, 'Data/overzichtSPEC.csv')
write.csv(ic, 'Data/overzichtIC.csv')
# Merge ic table with date range for 2 weeks
daterange <- as.Date(seq(Sys.Date(), wk+13, by = 1))
init      <- data.frame("Datum" = daterange, "IC" = as.integer(numeric(length(daterange))))
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
ic$Datum <- as.Date(ic$Datum)
# Match ic table
setDT(init)
setDT(ic)
init[ic, on = c("Datum"), IC := i.IC]
totalIC <- init %>%
filter((weekdays(Datum) %!in% c('zaterdag','zondag')))
write.csv(totalIC, 'Data/overzichtIC.csv')
# Match ic table
setDT(init)
setDT(ic)
init[ic, on = c("Datum"), IC := i.IC]
totalIC <- init %>%
filter((weekdays(Datum) %!in% c('zaterdag','zondag')))
write.csv(totalIC, 'Data/overzichtIC.csv')
View(datIC)
View(data)
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( as.Date(opnamedatum) >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
# Load data
data <- loadData(networkPath)
dataPlan <- data$dataPlanning
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum)
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
# Load data
data <- loadData(networkPath)
dataPlan <- data$dataPlanning
View(dataPlan)
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format="%Y-%m-%d)
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
datIC   <- data %>%
filter( GeplandeOpnamedatum >= wk & GeplandeOpnamedatum <=  wk + 13)
datIC$icdate <- ifelse(datIC$VER_CODE == "33450", as.Date(datIC$icdate) + 1, as.Date(datIC$icdate))
datIC$Postoperatieve_bestemming <- ifelse(datIC$Postoperatieve_bestemming == "MC", "IC", datIC$Postoperatieve_bestemming)
spec <- table(data.frame(datSPEC$opnamedatum, datSPEC$opnemendspecialisme))
ic   <- table(data.frame(datIC$icdate, datIC$Postoperatieve_bestemming))
write.csv(spec, 'Data/overzichtSPEC.csv')
write.csv(ic, 'Data/overzichtIC.csv')
# Merge ic table with date range for 2 weeks
daterange <- as.Date(seq(Sys.Date(), wk+13, by = 1))
init      <- data.frame("Datum" = daterange, "IC" = as.integer(numeric(length(daterange))))
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
ic$Datum <- as.Date(ic$Datum)
# Match ic table
setDT(init)
setDT(ic)
init[ic, on = c("Datum"), IC := i.IC]
totalIC <- init %>%
filter((weekdays(Datum) %!in% c('zaterdag','zondag')))
write.csv(totalIC, 'Data/overzichtIC.csv')
# Bypass if no ic present
if ( TRUE %!in% grepl("IC", datIC$Postoperatieve_bestemming) ){
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
noIC <- ic %>%
mutate( IC = numeric(length(ic$Datum)) )
write.csv(noIC, 'Data/overzichtIC.csv', row.names=FALSE)
}
}
#' @title Reload
#' @description Function to reload the dataset
#' @param data
#' @export
reload <- function(data){
ptm <- proc.time()
#networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
networkPath <- "A:\\MMC\\Building_Blocks\\Planners\\PlanApp\\WebApp - Auto refresh\\Data"
# Load new data
data <- reloadData(networkPath)
# Make overview
deps <- c("2C" , "2D")
getOverview(data$iclist, data$dataPlanning)
# Check if dataset is filled
while( empty(data$dataPlanning) | empty(data$dataCurrent) ) {
print("Empty dataframe")
Sys.sleep(5)
data <- reloadData(networkPath)
}
print('Dataframe filled')
dataTrain <- read.csv('Data/dataTrain.csv')
# Pre-format data
data$dataPlanning <- data$dataPlanning %>%
filter(reserveringsafdeling %in% deps | grepl("Carotis", okverrichtingomschrijving) == T) %>%
filter(opnemendspecialisme != "GYN") %>%
mutate(opnamedatum = as.Date(opnamedatum, format = "%d-%m-%Y"))
data$dataCurrent <- data$dataCurrent %>%
filter(afdelingcode %in% c("2C","2D")) %>%
filter(okprioriteitcodeomschrijving == "Electief (planbaar)")
recentPlanning <- data$dataPlanning %>%
filter(data$dataPlan$laatstemutatiedatumtijd == max(data$dataPlan$laatstemutatiedatumtijd))
# Data corrections and column selection
dataCurr  <- formatTest(data$dataCurrent, dataTrain)
dataPlan  <- formatTest(data$dataPlan, dataTrain)
dataWacht <- formatTest(data$wachtlijst, dataTrain)
write.csv(dataWacht, 'Data/wachtlijst.csv')
write.csv(dataCurr, 'Data/dataCurrent.csv')
write.csv(data$dataPlan, 'Data/dataplanning.csv')
# Load cox proportional hazard model
load("Data/fitCox.RData")
# Get predictions for current and planned patients
# Current patients
predictions.current <- survfit(fitCox, newdata = dataCurr)
dailyPredictions.current <- predictions.current$surv
colnames(dailyPredictions.current) <- dataCurr$opnamenummer
# Planned patients
predictions.planning <- survfit(fitCox, newdata = dataPlan)
dailyPredictions.planning <- predictions.planning$surv
colnames(dailyPredictions.planning) <- dataPlan$opnamenummer
# Fill planning with current patients and planned patients
results.planning <- formatOutputPlanning(dailyPredictions.planning, dailyPredictions.current, dataPlan, dataCurr)
results.recent   <- results.planning[, -which(names(results.planning) %in% as.character(recentPlanning$opnamenummer))]
results.current  <- results.planning[, which(names(results.planning[,-1]) %in% as.character(dataCurr$opnamenummer))]
# Write results to data frame
fc.current  <- cbind(data.frame(results.current$tDate), data.frame(rowSums(results.current[,-1])))
fc.planning <- cbind(data.frame(results.planning$tDate),data.frame(rowSums(results.planning[,-1])))
fc.recent   <- cbind(data.frame(results.recent$tDate), data.frame(rowSums(results.recent[,-1])))
# Keep data upward of today
fc.current  <- fc.current[fc.current[,1] >= Sys.Date(), ]
fc.planning <- fc.planning[fc.planning[,1] >= Sys.Date(), ]
fc.recent   <- fc.recent[fc.recent[,1] >= Sys.Date(), ]
# Bind data and rename
fc <- cbind(fc.current,fc.planning[,2], fc.recent[,2])
colnames(fc)  <- c("dates","prob.c", "prob.p", "prob.r")
# Add red line to show maximum capacity
maxWeekend <- 8
maxWeekday <- 14
fc$max <- ifelse(weekdays(fc$dates) %in% c("zaterdag", "zondag"), maxWeekend, maxWeekday)
write.csv(fc, 'Data/fc.csv')
# Prepare data for app tabs
getCurrent(data$dataCurrent, deps)
print(proc.time() - ptm)
return(fc)
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
#dataTrain$length_of_stay <- Surv(dataTrain$length_of_stay, rep(1, nrow(dataTrain)))
#summary(fitCox <- coxph(length_of_stay ~., dataTrain[,c(-1,-2)]))
#save(fitCox, file = "fitCox.RData"
dataPlan <- data$dataPlanning
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format="%Y-%m-%d")
View(dataPlan)
dataPlan <- data$dataPlanning
typeof(dataPlan$opnamedatum)
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum)
typeof(dataPlan$opnamedatum)
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
dataPlan <- data$dataPlanning
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 )
}
dataPlan <- data$dataPlanning
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
View(dataPlan)
wk
wk+13
# Folder where data is stored
# networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
networkPath <- "A:\\MMC\\Building_Blocks\\Planners\\PlanApp\\WebApp - Auto refresh\\Data"
# Libraries
library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
library(survival)
library(readxl)
library(lubridate)
source("functions.r")
# Load data
data <- loadData(networkPath)
# Make overview
deps <- c("2C" , "2D")
getOverview(data$iclist, data$dataPlanning)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Folder where data is stored
# networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
networkPath <- "A:\\MMC\\Building_Blocks\\Planners\\PlanApp\\WebApp - Auto refresh\\Data"
# Libraries
library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
library(survival)
library(readxl)
library(lubridate)
source("functions.r")
deps = c("3", "4")
deps[deps == "3"] <- "2c"
deps = as.integer(deps)
deps = c("3", "4")
deps = as.integer(deps)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
n    <- which( as.Date(IC$Datum) == floor_date(Sys.Date()+5, "week")+1 )
# Read tables
IC         <- read.csv('Data/overzichtIC.csv')
SPEC       <- read.csv('Data/overzichtSPEC.csv')
IC   <- IC[,-c(1)]
n    <- which( as.Date(IC$Datum) == floor_date(Sys.Date()+5, "week")+1 )
n
floor_date(Sys.Date()+5, "week")
floor_date(Sys.Date()+5, "week")+1
n    <- which( as.Date(IC$Datum) == floor_date(Sys.Date()+6, "week")+1 )
n    <- which( as.Date(IC$Datum) == floor_date(Sys.Date()+6, "week")+1 )
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Folder where data is stored
networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
# Libraries
library(data.table)
library(plyr)
library(dplyr)
library(readstata13)
library(ggplot2)
library(hydroGOF)
library(survival)
library(readxl)
library(lubridate)
source("functions.r")
deps = c(3,4)
deps[deps == 1] <- "2A"
deps[deps == 2] <- "2B"
deps[deps == 3] <- "2C"
deps[deps == 4] <- "2D"
# Load data
data <- loadData(networkPath)
# Make overview
getOverview(data$iclist, data$dataPlanning, deps)
dataplan <- data$dataPlanning
data <- data$iclist
# Create custom function
'%!in%' <- function(x,y)!('%in%'(x,y))
dataIC <- dataIC %>%
mutate( GeplandeOpnamedatum = as.Date(GeplandeOpnamedatum, format="%Y-%m-%d %H:%M:%OS") )
dataIC <- data
dataIC <- dataIC %>%
mutate( GeplandeOpnamedatum = as.Date(GeplandeOpnamedatum, format="%Y-%m-%d %H:%M:%OS") )
dataIC$icdate <- dataIC$GeplandeOpnamedatum
wk <- floor_date(Sys.Date(), "week")+1
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
dataPlan <- dataplan
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 ) %>%
filter( opnemendspecialisme %in% deps )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 ) %>%
filter( reserveringsafdeling %in% deps )
}
floor_date(Sys.Date())
floor_date(Sys.Date(), "week")
floor_date(Sys.Date(), "week")+1
View(dataplan)
View(dataPlan)
dataPlan$opnamedatum <- as.Date(dataPlan$opnamedatum, format = "%d-%m-%Y")
if (weekdays(Sys.Date()) == "vrijdag"){
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 13 ) %>%
filter( reserveringsafdeling %in% deps )
} else {
datSPEC <- dataPlan %>%
filter( opnamedatum >= wk & opnamedatum <= wk + 6 ) %>%
filter( reserveringsafdeling %in% deps )
}
datIC   <- dataIC %>%
filter( GeplandeOpnamedatum >= wk & GeplandeOpnamedatum <=  wk + 13)
datIC$icdate <- ifelse(datIC$VER_CODE == "33450", as.Date(datIC$icdate) + 1, as.Date(datIC$icdate))
spec <- table(data.frame(datSPEC$opnamedatum, datSPEC$opnemendspecialisme))
ic   <- table(data.frame(datIC$icdate, datIC$Postoperatieve_bestemming))
write.csv(spec, 'Data/overzichtSPEC.csv')
write.csv(ic, 'Data/overzichtIC.csv')
# Merge ic table with date range for 2 weeks
daterange <- as.Date(seq(Sys.Date(), wk+13, by = 1))
init      <- data.frame("Datum" = daterange, "IC" = as.integer(numeric(length(daterange))))
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
ic$Datum <- as.Date(ic$Datum)
# Match ic table
setDT(init)
setDT(ic)
init[ic, on = c("Datum"), IC := i.IC]
totalIC <- init %>%
filter((weekdays(Datum) %!in% c('zaterdag','zondag')))
write.csv(totalIC, 'Data/overzichtIC.csv')
# Bypass if no ic present
if ( TRUE %!in% grepl("IC", datIC$Postoperatieve_bestemming) ){
ic = read.csv('Data/overzichtIC.csv', header = T)
data.frame(ic)
colnames(ic) = c("Datum", "IC")
noIC <- ic %>%
mutate( IC = numeric(length(ic$Datum)) )
write.csv(noIC, 'Data/overzichtIC.csv', row.names=FALSE)
}
runApp()
runApp()
runApp()
runApp()
setwd("A:/MMC/Building_Blocks/Planners/PlanApp/WebApp - Auto refresh")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Folder where data is stored
networkPath <- "\\\\nas001\\MMC-ALG\\Data-analyse-BI\\Building Blocks\\Planners\\Data"
runApp()
shiny::runApp()
runApp()
library(shiny); source('run.R')
